#!/bin/bash

# MILAPP - Script de Setup
# Sistema Integrado de Gest√£o RPA e Inova√ß√£o

set -e

echo "üöÄ MILAPP - Setup Inicial"
echo "=========================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verifica se Docker est√° instalado
check_docker() {
    log "Verificando Docker..."
    if ! command -v docker &> /dev/null; then
        error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    log "Docker e Docker Compose encontrados ‚úì"
}

# Verifica se arquivo .env existe
check_env() {
    log "Verificando arquivo de configura√ß√£o..."
    if [ ! -f .env ]; then
        warn "Arquivo .env n√£o encontrado. Criando a partir do exemplo..."
        cp .env.example .env
        log "Arquivo .env criado. Por favor, edite as vari√°veis de ambiente conforme necess√°rio."
        echo ""
        echo "‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes antes de continuar!"
        echo "   - Configure as chaves da OpenAI"
        echo "   - Configure as credenciais do Supabase"
        echo "   - Configure as integra√ß√µes do Azure"
        echo ""
        read -p "Pressione Enter ap√≥s editar o arquivo .env..."
    else
        log "Arquivo .env encontrado ‚úì"
    fi
}

# Cria diret√≥rios necess√°rios
create_directories() {
    log "Criando diret√≥rios necess√°rios..."
    mkdir -p uploads logs static
    log "Diret√≥rios criados ‚úì"
}

# Verifica depend√™ncias do sistema
check_system_deps() {
    log "Verificando depend√™ncias do sistema..."
    
    # Verifica se git est√° instalado
    if ! command -v git &> /dev/null; then
        warn "Git n√£o encontrado. Instalando..."
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y git
        elif command -v yum &> /dev/null; then
            sudo yum install -y git
        else
            error "N√£o foi poss√≠vel instalar o Git automaticamente. Instale manualmente."
            exit 1
        fi
    fi
    
    log "Depend√™ncias do sistema verificadas ‚úì"
}

# Build das imagens Docker
build_images() {
    log "Construindo imagens Docker..."
    docker-compose build
    log "Imagens constru√≠das ‚úì"
}

# Inicia os servi√ßos
start_services() {
    log "Iniciando servi√ßos..."
    docker-compose up -d
    log "Servi√ßos iniciados ‚úì"
}

# Verifica se os servi√ßos est√£o rodando
check_services() {
    log "Verificando status dos servi√ßos..."
    
    # Aguarda um pouco para os servi√ßos inicializarem
    sleep 10
    
    # Verifica backend
    if curl -f http://localhost:8000/health &> /dev/null; then
        log "Backend (FastAPI) ‚úì"
    else
        warn "Backend ainda n√£o est√° respondendo. Aguarde alguns segundos..."
    fi
    
    # Verifica frontend
    if curl -f http://localhost:3000 &> /dev/null; then
        log "Frontend (React) ‚úì"
    else
        warn "Frontend ainda n√£o est√° respondendo. Aguarde alguns segundos..."
    fi
    
    # Verifica dashboards
    if curl -f http://localhost:8501 &> /dev/null; then
        log "Dashboards (Streamlit) ‚úì"
    else
        warn "Dashboards ainda n√£o est√£o respondendo. Aguarde alguns segundos..."
    fi
}

# Mostra informa√ß√µes finais
show_info() {
    echo ""
    echo "üéâ MILAPP instalado com sucesso!"
    echo "================================"
    echo ""
    echo "üì± Acesse as aplica√ß√µes:"
    echo "   ‚Ä¢ Frontend:     http://localhost:3000"
    echo "   ‚Ä¢ Backend API:  http://localhost:8000"
    echo "   ‚Ä¢ Documenta√ß√£o: http://localhost:8000/docs"
    echo "   ‚Ä¢ Dashboards:   http://localhost:8501"
    echo ""
    echo "üîß Comandos √∫teis:"
    echo "   ‚Ä¢ Parar servi√ßos:    docker-compose down"
    echo "   ‚Ä¢ Ver logs:          docker-compose logs -f"
    echo "   ‚Ä¢ Reiniciar:         docker-compose restart"
    echo "   ‚Ä¢ Atualizar:         docker-compose pull && docker-compose up -d"
    echo ""
    echo "üìö Documenta√ß√£o:"
    echo "   ‚Ä¢ README.md - Documenta√ß√£o completa"
    echo "   ‚Ä¢ API Docs - http://localhost:8000/docs"
    echo ""
    echo "‚ö†Ô∏è  Lembre-se de:"
    echo "   ‚Ä¢ Configurar as vari√°veis de ambiente no arquivo .env"
    echo "   ‚Ä¢ Configurar as integra√ß√µes externas (OpenAI, Supabase, etc.)"
    echo "   ‚Ä¢ Testar todas as funcionalidades antes de usar em produ√ß√£o"
    echo ""
}

# Fun√ß√£o principal
main() {
    echo ""
    log "Iniciando setup do MILAPP..."
    echo ""
    
    check_docker
    check_env
    create_directories
    check_system_deps
    build_images
    start_services
    check_services
    show_info
}

# Executa fun√ß√£o principal
main "$@"